function siriusLogin {
  source ~/dev/sxm/.envrc
  scripts/artifactory-credentials.sh
}
alias sl=siriusLogin

function sxmup {
  open -a /Applications/Arc.app
  open -a /Applications/Slack.app
  open -a /Applications/Obsidian.app

  updates
  cd ~/dev/sxm
}

function siriusValidate {
  siriusLogin && sbt validate
}
alias scv=siriusValidate

function siriusCDKBuild {
  unset STRIPE_API_KEY_USD
  unset STRIPE_ACCOUNT_ID_USD
  cd infrastructure && npm install && npx jest --updateSnapshot && cd ..
}
alias scdk=siriusCDKBuild

function sitOnly() {
  sbt "service / Docker / publishLocal; integration/testOnly $1 com.siriusxm.it.utils.SharedResources"
}

function openMockserver {
  if [[ -z $(docker ps --format "{{.ID}}") ]]
  then
    echo "No containers are running in docker"
  else
    ports=$(docker ps -f name=mockserver --format "{{.Ports}}")
    if [[ -z $ports ]]
    then
      echo "mockserver is not running"
    else
      port=$(echo "$ports" | grep -o '[0-9]*->' | sed 's/->//' | head -n 1)
      open "http://localhost:$port/mockserver/dashboard"
    fi
  fi
}

function toggleIgnore {

  usage="Toggles sibling '*.scala' and '*.scala.ignore' file names whilst ignoring the given file.\nUsage:\n  toggleIgnore <absolute/it/path/Integration.scala>"

  if [[ -z "$1" || "$*" != *"/it/"* ]]; then
    _info "Usage:\n  ${yellow}ignoreOthersInIT <absolute/file/path>${reset}\n(where the path must include '/it/')"
  else
    parentdir="$(dirname "$1")"
    ignoreFile="$(basename "$1")"

    for file in "$parentdir"/*.*
    do
      if [[ "$file" != *"$ignoreFile"* ]];then
        if [[ $file == *.scala ]];then
          cmd="mv $file $file.ignore"
          eval $cmd
        elif if [[ $file == *.scala.ignore ]];then
          cmd="mv $file ${file%.*}"
          eval $cmd
        fi
      fi
    done
  fi
}

function openDD() {
  local usage="Usage:\n  ${yellow}openDD -e [dev|test|prod] -s <subId> -o <orderId> -d <deviceId> -i <identityId>${reset}\n-e is required and at least one of -s, -o, -d or -i must be provided\n"

  # example:
  # local services="*order-service* OR stripe-webhook-service"
  local services="subscription-service OR *order-service* OR *entitlement-service*"

  # examples:
  # local excludes=""
  # local excludes="\"Get subscription\" OR \"/meta\""
  local excludes="\"with API key succeeded\" OR \"/meta\""

  # example:
  # local columns="@service,@context.offerId"
  local columns="@service"

  local env=""
  local sub=""
  local order=""
  local device=""
  local identity=""

  while getopts ":s:o:d:i:e:" opt; do
    case ${opt} in
      s )
        sub=$OPTARG
        ;;
      o )
        order=$OPTARG
        ;;
      d )
        device=$OPTARG
        ;;
      i )
        identity=$OPTARG
        ;;
      e )
        env=$OPTARG
        ;;
      \? )
        _info $usage
        ;;
      : )
        _info $usage
        ;;
    esac
  done
  shift $((OPTIND -1))

  if [[ -z "$env" ]]; then
    _info "Missing -e"
    _info $usage
  elif [[ "$env" != "test" && "$env" != "dev" && "$env" != "prod" ]]; then
    _info "-e may only be dev, test or prod"
    _info $usage
  elif [ -z "$sub" ] && [ -z "$order" ] && [ -z "$device" ] && [ -z "$identity" ]; then
    _info "You must provide one of -s, -o, -d or -i"
    _info $usage
  else

    local criteria=()
    if [ "$sub" != "" ]; then
      criteria+=($sub)
      criteria+=(@context.subscriptionId:$sub)
    fi

    if [ "$order" != "" ]; then
      criteria+=($order)
      criteria+=(@context.orderId:$order)
    fi

    if [ "$device" != "" ]; then
      criteria+=($device)
      criteria+=(@context.deviceId:$device)
    fi

    if [ "$identity" != "" ]; then
      criteria+=($identity)
      criteria+=(@context.identityId:$identity)
    fi

    local ctx=""
    for c in "${criteria[@]}"; do
      ctx+="$c OR "
    done
    ctxs=${ctx::-4}

    local query="env:$env service:($services) ($ctxs)"
    if [ "$excludes" != "" ]; then
      query="$query -($excludes)"
    fi
    query=$(echo -n "$query" | jq -s -R -r @uri)

    local cols=$(echo -n "$columns" | jq -s -R -r @uri)
    local to=$(date +%s)
    local from=$(date -v -15M +%s)
    local url="https://app.datadoghq.com/logs/live-search?query=$query&agg_m=count&agg_m_source=base&agg_t=count&cols=$cols&fromUser=true&messageDisplay=inline&refresh_mode=sliding&storage=flex_tier&stream_sort=time%2Cdesc&viz=stream&from_ts=$from&to_ts=$to"

    # echo $url
    open $url
  fi
}

# SiriusXM Setup
source $HOME/.sde/profile/profile.sh
export PYENV_ROOT="${HOME}/.pyenv"
export PATH="${PYENV_ROOT}/bin:${PATH}"
eval "$(pyenv init -)"
# End: SiriusXM Setup

